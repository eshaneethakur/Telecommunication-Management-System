--CREATE A MASTER KEY FOR THE DATABASE
CREATE MASTER KEY ENCRYPTION BY  
PASSWORD = 'Email'  
GO

--CREATE A SECURITY CERTIFICATE
CREATE CERTIFICATE SelfSignedCertificate  
WITH SUBJECT = 'Email Encryption';  
GO  

--CREATING A KEY FOR ENCODING/DECODING THE COLUMNS
CREATE SYMMETRIC KEY SQLSymmetricKey  
WITH ALGORITHM = AES_128  
ENCRYPTION BY CERTIFICATE SelfSignedCertificate;  
GO  

--ADDING NEW COLUMN FOR ENCRYPTED FIELD
ALTER TABLE Customer  
ADD EncryptedEmail VARBINARY(MAX) NULL  
GO

--OPENING THE KEY FOR DECRYPTION (ELSE DECRYPTED COLUMN IS DISPLAYED AS NULL)
OPEN SYMMETRIC KEY SQLSymmetricKey  
DECRYPTION BY CERTIFICATE SelfSignedCertificate;
GO

--UPDATING THE ENCRYPTED VALUES
UPDATE Customer  
SET EncryptedEmail = EncryptByKey(Key_GUID('SQLSymmetricKey'), Email);  
GO  

----SELECT FOR ENCRYPTED AND DECRYPTED COLUMNS
--SELECT *,  
--CONVERT(varchar, DecryptByKey(EncryptedEmail)) AS 'DecryptedEmail'  
--FROM customer;
--GO

--CLOSING THE KEY
CLOSE SYMMETRIC KEY SQLSymmetricKey;  
GO  


--Check
OPEN SYMMETRIC KEY SQLSymmetricKey  
DECRYPTION BY CERTIFICATE SelfSignedCertificate;
GO

SELECT *,  
CONVERT(varchar, DecryptByKey(EncryptedEmail)) AS 'DecryptedEmail'  
FROM customer;


CLOSE SYMMETRIC KEY SQLSymmetricKey;  
GO 